{"version":3,"sources":["PatternView.js","PatternDatabase.js","ControlView.js","DownloadButton.js","App.js","serviceWorker.js","patterns/TriangleMesh.js","parameters/NumericParameter.js","parameters/ColorParameter.js","patterns/Isometric.js","index.js"],"names":["PatternView","react_default","a","createElement","className","this","props","pattern","React","Component","names","data","PatternDatabase","name","parameters","push","ControlView","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getPatternNames","getPattern","state","patternName","handlePatternChange","handleChange","bind","assertThisInitialized","ev","target","value","setState","onChange","map","i","key","concat","DownloadButton","dataURI","handleClick","btoa","document","querySelector","outerHTML","onClick","download","href","App","ControlView_ControlView","PatternView_PatternView","DownloadButton_DownloadButton","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","widthRef","heightRef","spacingRef","spacingDeviationRef","vertexSizeRef","edgeSizeRef","stepsRef","backgroundRef","foregroundRef","width","height","spacing","spacingDeviation","vertexSize","edgeSize","steps","background","foreground","NumericParameter","localStorage","label","defaultValue","textValue","handleStateChanged","forceUpdate","parseFloat","isNaN","endsWith","type","ColorParameter","_this2","TriangleMesh","current","w","h","vertSpacing","Math","sin","PI","spacingDev","color","gfx","x","y","fill","verts","edges","offset","prevCount","count","firstX","v","length","forEach","d","random","cos","valid","v2","sqrt","pow","cont","_loop","j","neighborhood","filter","v1","splice","v3","indexOf","deadEdges","e","deadVerts","topLeft","topRight","bottomLeft","bottomRight","wrappingMap","loop","slice","_loop2","vs","_loop3","newEdges","hash1","hash2","abs","leftSide","_loop4","s","sort","b","_loop5","e1","m1","t1","l1","min","g1","max","e2","m2","t2","l2","g2","middles","_loop6","ex","edge","x1","y1","x2","y2","strokeWidth","stroke","vert","cx","cy","r","viewBox","createRef","NumericParameter_NumericParameter","ref","ColorParameter_ColorParameter","TriangleMesh_TriangleMesh","tan30","tan","Isometric","size","c","dy","lines","maxY","sizeRef","Isometric_Isometric","ReactDOM","render","App_App","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8948038e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PatternView.css\";\n\nexport default class PatternView extends React.Component {\n    render() {\n        return (\n            <div className=\"pattern-view\">\n                {this.props.pattern}\n            </div>\n        );\n    }\n}\n","let names = [];\nlet data = {};\n\nexport default class PatternDatabase {\n    static register(name, parameters, pattern) {\n        names.push(name);\n        data[name] = {\n            \"parameters\": parameters,\n            \"pattern\": pattern\n        };\n    }\n\n    static getPatternNames() {\n        return names;\n    }\n\n    static getPattern(name) {\n        return data[name];\n    }\n}\n","import React from \"react\";\nimport PatternDatabase from \"./PatternDatabase\";\nimport \"./ControlView.css\";\n\nexport default class ControlView extends React.Component {\n    constructor(props) {\n        super(props);\n        const name = PatternDatabase.getPatternNames()[0];\n        const pattern = PatternDatabase.getPattern(name);\n        this.state = {\n            \"patternName\": name,\n            \"parameters\": pattern.parameters\n        };\n        this.props.handlePatternChange(pattern.pattern);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(ev) {\n        const pattern = PatternDatabase.getPattern(ev.target.value);\n        this.setState({\n            \"patternName\": ev.target.value,\n            \"parameters\": pattern.parameters\n        });\n        this.props.handlePatternChange(pattern.pattern);\n    }\n\n    render() {\n        return (\n            <div className=\"control-view\">\n                <div className=\"input-field\">\n                    <label>Pattern Type</label>\n                    <select value={this.state.patternName} onChange={this.handleChange}>\n                        {PatternDatabase.getPatternNames().map((name, i) => (\n                            <option key={`pattern-${i}`} value={name}>{name}</option>\n                        ))}\n                    </select>\n                </div>\n                {this.state.parameters}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./DownloadButton.css\";\n\nexport default class DownloadButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"dataURI\": null\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        if (this.state.dataURI) {\n            this.setState({\n                \"dataURI\": null\n            });\n        } else {\n            this.setState({\n                \"dataURI\": \"data:application/octet-stream;base64,\" + btoa(document.querySelector(\"svg\").outerHTML)\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.dataURI && (\n                    <div className=\"download-dialog\">\n                        <div className=\"background\" onClick={this.handleClick} />\n                        <div className=\"dialog\">\n                            <h2>Download Ready</h2>\n                            <a download=\"pattern.svg\" href={this.state.dataURI}>Download pattern.svg</a>\n                        </div>\n                    </div>\n                )}\n                <div className=\"download-button material-icons\" onClick={this.handleClick}>\n                    cloud_download\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport PatternView from \"./PatternView\";\nimport ControlView from \"./ControlView\";\nimport DownloadButton from \"./DownloadButton\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"pattern\": null\n        };\n        this.handlePatternChange = this.handlePatternChange.bind(this);\n    }\n\n    handlePatternChange(pattern) {\n        this.setState({\n            \"pattern\": pattern\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <ControlView handlePatternChange={this.handlePatternChange} />\n                <PatternView pattern={this.state.pattern} />\n                <DownloadButton />\n            </div>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n          /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It\"s the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\"New content is available; please refresh.\");\n\n                            // Execute callback\n                            if (config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It\"s the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport NumericParameter from \"../parameters/NumericParameter\";\nimport ColorParameter from \"../parameters/ColorParameter\";\nimport PatternDatabase from \"../PatternDatabase\";\n\nconst dpi = 300;\nconst margin = 5;\n\nclass TriangleMesh extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.width.current.pattern = this;\n        this.props.height.current.pattern = this;\n        this.props.spacing.current.pattern = this;\n        this.props.spacingDeviation.current.pattern = this;\n        this.props.vertexSize.current.pattern = this;\n        this.props.edgeSize.current.pattern = this;\n        this.props.steps.current.pattern = this;\n        this.props.background.current.pattern = this;\n        this.props.foreground.current.pattern = this;\n    }\n\n    render() {\n        const w = this.props.width.current.state.value * dpi;\n        const h = this.props.height.current.state.value * dpi;\n        const spacing = this.props.spacing.current.state.value * dpi;\n        const vertSpacing = spacing * Math.sin(Math.PI / 3);\n        const spacingDev = this.props.spacingDeviation.current.state.value * dpi;\n        const vertexSize = this.props.vertexSize.current.state.value * dpi;\n        const edgeSize = this.props.edgeSize.current.state.value * dpi;\n        const color = this.props.foreground.current.state.value;\n        let gfx = [];\n        if ((spacing === 0 && spacingDev === 0) || spacingDev < 0) {\n            gfx.push(<rect x=\"0\" y=\"0\" width={w} height={h} fill={color} key=\"box\" />);\n        } else {\n            let verts = [];\n            let edges = [];\n            try {\n                let offset = 0;\n                for (let y = -vertSpacing * margin, prevCount = 0; y < h + vertSpacing * margin; y += vertSpacing) {\n                    let count = 0;\n                    for (let x = -spacing * margin + offset, firstX = true; x < w + spacing * margin; x += spacing) {\n                        let v = [ x, y, [] ];\n                        verts.push(v);\n                        if (!firstX) {\n                            edges.push([ v, verts[verts.length - 2] ]);\n                            v[2].push(verts[verts.length - 2]);\n                            verts[verts.length - 2][2].push(v);\n                        }\n                        if (prevCount > 0 && count < prevCount) {\n                            edges.push([ v, verts[verts.length - prevCount - 1] ]);\n                            v[2].push(verts[verts.length - prevCount - 1]);\n                            verts[verts.length - prevCount - 1][2].push(v);\n                            if (!firstX || offset !== 0) {\n                                edges.push([ v, verts[verts.length - prevCount - (offset === 0 ? 2 : 0)] ]);\n                                v[2].push(verts[verts.length - prevCount - (offset === 0 ? 2 : 0)]);\n                                verts[verts.length - prevCount - (offset === 0 ? 2 : 0)][2].push(v);\n                            }\n                        }\n                        firstX = false;\n                        ++count;\n                    }\n                    prevCount = count;\n                    offset = spacing / 2 - offset;\n                }\n                for (let i = 0; i < this.props.steps.current.state.value; ++i) {\n                    verts.forEach(v => {\n                        let d = spacingDev * Math.random();\n                        let a = Math.PI * 2 * Math.random();\n                        let x = v[0] + d * Math.cos(a);\n                        let y = v[1] + d * Math.sin(a);\n                        let valid = true;\n                        v[2].forEach(v2 => {\n                            if (Math.sqrt(Math.pow(x - v2[0], 2) + Math.pow(y - v2[1], 2)) > spacing + spacingDev) {\n                                valid = false;\n                            }\n                        });\n                        if (valid) {\n                            v[0] = x;\n                            v[1] = y;\n                        }\n                    });\n                    let cont;\n                    do {\n                        cont = false;\n                        for (let j = 0; j < verts.length; ++j) {\n                            let neighborhood = verts.filter(v => Math.sqrt(Math.pow(v[0] - verts[j][0], 2) + Math.pow(v[1] - verts[j][1], 2)) < spacing - spacingDev);\n                            if (neighborhood.length > 1) {\n                                let x = 0;\n                                let y = 0;\n                                neighborhood.forEach(v => {\n                                    x += v[0];\n                                    y += v[1];\n                                });\n                                x /= neighborhood.length;\n                                y /= neighborhood.length;\n                                const v1 = neighborhood[0];\n                                neighborhood.splice(0, 1);\n                                v1[0] = x;\n                                v1[1] = y;\n                                neighborhood.forEach(v2 => {\n                                    v2[2].forEach(v3 => {\n                                        if (v1[2].indexOf(v3) < 0) {\n                                            v1[2].push(v3);\n                                            v3[2][v3[2].indexOf(v2)] = v1;\n                                            edges.push([ v1, v3 ]);\n                                        }\n                                    });\n                                    let deadEdges = [];\n                                    edges.forEach(e => {\n                                        if (e[0] === v2 || e[1] === v2) {\n                                            deadEdges.push(e);\n                                        }\n                                    });\n                                    deadEdges.forEach(e => {\n                                        edges.splice(edges.indexOf(e), 1);\n                                    });\n                                    verts.splice(verts.indexOf(v2), 1);\n                                });\n                            }\n                        }\n                    } while (cont);\n                }\n                let deadVerts = [];\n                verts.forEach(v => {\n                    if (v[0] < 0 || v[0] > w || (v[1] < 0 && v[1] > h)) {\n                        deadVerts.push(v);\n                    }\n                });\n                deadVerts.forEach(v => {\n                    verts.splice(verts.indexOf(v), 1);\n                });\n                verts.forEach(v1 => {\n                    deadVerts = [];\n                    v1[2].forEach(v2 => {\n                        if (verts.indexOf(v2) < 0) {\n                            deadVerts.push(v2);\n                        }\n                    });\n                    deadVerts.forEach(v2 => {\n                        v1[2].splice(v1[2].indexOf(v2), 1);\n                    });\n                });\n                let deadEdges = [];\n                edges.forEach(e => {\n                    if (verts.indexOf(e[0]) < 0 || verts.indexOf(e[1]) < 0) {\n                        deadEdges.push(e);\n                    }\n                });\n                deadEdges.forEach(e => {\n                    edges.splice(edges.indexOf(e), 1);\n                });\n                offset = w / 2;\n                verts.forEach(v => {\n                    if (v[0] > offset) {\n                        v[0] -= offset;\n                    } else {\n                        v[0] += offset;\n                    }\n                });\n                let topLeft = verts[0];\n                let topRight = verts[0];\n                let bottomLeft = verts[0];\n                let bottomRight = verts[0];\n                verts.forEach(v => {\n                    if (Math.sqrt(Math.pow(topLeft[0], 2) + Math.pow(topLeft[1], 2)) > Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2))) {\n                        topLeft = v;\n                    }\n                    if (Math.sqrt(Math.pow(w - topRight[0], 2) + Math.pow(topRight[1], 2)) > Math.sqrt(Math.pow(w - v[0], 2) + Math.pow(v[1], 2))) {\n                        topRight = v;\n                    }\n                    if (Math.sqrt(Math.pow(bottomLeft[0], 2) + Math.pow(h - bottomLeft[1], 2)) > Math.sqrt(Math.pow(v[0], 2) + Math.pow(h - v[1], 2))) {\n                        bottomLeft = v;\n                    }\n                    if (Math.sqrt(Math.pow(w - bottomRight[0], 2) + Math.pow(h - bottomRight[1], 2)) > Math.sqrt(Math.pow(w - v[0], 2) + Math.pow(h - v[1], 2))) {\n                        bottomRight = v;\n                    }\n                });\n                let wrappingMap = {};\n                let loop = (v) => {\n                    let v2 = [ w + v[0], v[1], [] ];\n                    verts.push(v2);\n                    wrappingMap[v.slice(0, 2)] = v2;\n                };\n                let v;\n                for (v = topLeft; v !== bottomLeft;) {\n                    loop(v);\n                    // eslint-disable-next-line\n                    let vs = v[2].filter(v2 => v2[1] > v[1]);\n                    let v1 = vs[0];\n                    vs.forEach(v2 => {\n                        if (v1[0] > v2[0]) {\n                            v1 = v2;\n                        }\n                    });\n                    v = v1;\n                }\n                loop(v);\n                loop = (v) => {\n                    let v2 = [ v[0] - w, v[1], [] ];\n                    verts.push(v2);\n                    wrappingMap[v.slice(0, 2)] = v2;\n                };\n                for (v = topRight; v !== bottomRight;) {\n                    loop(v);\n                    // eslint-disable-next-line\n                    let vs = v[2].filter(v2 => v2[1] > v[1]);\n                    let v1 = vs[0];\n                    vs.forEach(v2 => {\n                        if (v1[0] < v2[0]) {\n                            v1 = v2;\n                        }\n                    });\n                    v = v1;\n                }\n                loop(v);\n                deadEdges = [];\n                let newEdges = [];\n                edges.forEach(e => {\n                    let hash1 = e[0].slice(0, 2);\n                    let hash2 = e[1].slice(0, 2);\n                    if (wrappingMap[hash1] && wrappingMap[hash2] && Math.abs(e[0][0] - e[1][0]) > w / 2) {\n                        e[0][2].splice(e[0][2].indexOf(e[1]));\n                        e[1][2].splice(e[1][2].indexOf(e[0]));\n                        deadEdges.push(e);\n                        newEdges.push([ e[0], wrappingMap[hash2] ]);\n                        e[0][2].push(wrappingMap[hash2]);\n                        wrappingMap[hash2][2].push(e[0]);\n                        newEdges.push([ e[1], wrappingMap[hash1] ]);\n                        e[1][2].push(wrappingMap[hash1]);\n                        wrappingMap[hash1][2].push(e[1]);\n                    }\n                });\n                deadEdges.forEach(e => {\n                    edges.splice(edges.indexOf(e), 1);\n                });\n                newEdges.forEach(e => {\n                    edges.push(e);\n                });\n                topLeft = [ w, h ];\n                topRight = [ 0, h ];\n                bottomRight = [ 0, 0 ];\n                bottomLeft = [ w, 0 ];\n                verts.forEach(v => {\n                    if (v[0] < w / 2) {\n                        if (Math.sqrt(Math.pow(w / 2 - topLeft[0], 2) + Math.pow(topLeft[1], 2)) > Math.sqrt(Math.pow(w / 2 - v[0], 2) + Math.pow(v[1], 2))) {\n                            topLeft = v;\n                        }\n                        if (Math.sqrt(Math.pow(w / 2 - bottomLeft[0], 2) + Math.pow(h - bottomLeft[1], 2)) > Math.sqrt(Math.pow(w / 2 - v[0], 2) + Math.pow(h - v[1], 2))) {\n                            bottomLeft = v;\n                        }\n                    } else {\n                        if (Math.sqrt(Math.pow(topRight[0], 2) + Math.pow(topRight[1], 2)) > Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2))) {\n                            topRight = v;\n                        }\n                        if (Math.sqrt(Math.pow(bottomRight[0], 2) + Math.pow(h - bottomRight[1], 2)) > Math.sqrt(Math.pow(v[0], 2) + Math.pow(h - v[1], 2))) {\n                            bottomRight = v;\n                        }\n                    }\n                });\n                let leftSide = [];\n                loop = (v) => {\n                    if (v) {\n                        leftSide.push(v);\n                    }\n                };\n                for (v = topLeft; v !== bottomLeft;) {\n                    loop(v);\n                    // eslint-disable-next-line\n                    let vs = v[2].filter(v2 => v2[1] > v[1]);\n                    let v1 = vs[0];\n                    vs.forEach(v2 => {\n                        if (v1[0] < v2[0]) {\n                            v1 = v2;\n                        }\n                    });\n                    v = v1;\n                }\n                loop(v);\n                loop = (v) => {\n                    let s = leftSide.sort((a, b) => Math.abs(v[1] - a[1]) - Math.abs(v[1] - b[1]));\n                    for (var i = 0; i < 3; ++i) {\n                        v[2].push(s[i]);\n                        s[i][2].push(v);\n                        edges.push([ v, s[i] ]);\n                    }\n                };\n                for (v = topRight; v !== bottomRight;) {\n                    // eslint-disable-next-line\n                    let vs = v[2].filter(v2 => v2[1] > v[1]);\n                    let v1 = vs[0];\n                    vs.forEach(v2 => {\n                        if (v1[0] > v2[0]) {\n                            v1 = v2;\n                        }\n                    });\n                    loop(v);\n                    v = v1;\n                }\n                loop(v);\n                deadEdges = [];\n                edges.forEach(e1 => {\n                    if (deadEdges.indexOf(e1) < 0) {\n                        let m1 = (e1[0][1] - e1[1][1]) / (e1[0][0] - e1[1][0]);\n                        let t1 = m1 * e1[0][0] - e1[0][1];\n                        let l1 = Math.min(e1[0][0], e1[1][0]) + 0.0001;\n                        let g1 = Math.max(e1[0][0], e1[1][0]) - 0.0001;\n                        edges.forEach(e2 => {\n                            let m2 = (e2[0][1] - e2[1][1]) / (e2[0][0] - e2[1][0]);\n                            let t2 = m2 * e2[0][0] - e2[0][1];\n                            let l2 = Math.min(e2[0][0], e2[1][0]) + 0.0001;\n                            let g2 = Math.max(e2[0][0], e2[1][0]) - 0.0001;\n                            let x =(t1 - t2) / (m1 - m2);\n                            if (x > l1 && x > l2 && x < g1 && x < g2) {\n                                e2[0][2].splice(e2[0][2].indexOf(e2[1]), 1);\n                                e2[1][2].splice(e2[1][2].indexOf(e2[0]), 1);\n                                edges.splice(edges.indexOf(e2), 1);\n                                deadEdges.push(e2);\n                            }\n                        });\n                    }\n                });\n                let middles = verts.filter(v => Math.abs(w / 2 - v[0]) < w / 4);\n                for (let i = 0; i < this.props.steps.current.state.value; ++i) {\n                    middles.forEach(v => {\n                        let d = spacingDev * Math.random();\n                        let a = Math.PI * 2 * Math.random();\n                        let x = v[0] + d * Math.cos(a);\n                        let y = v[1] + d * Math.sin(a);\n                        let valid = true;\n                        v[2].forEach(v2 => {\n                            if (Math.sqrt(Math.pow(x - v2[0], 2) + Math.pow(y - v2[1], 2)) > spacing + spacingDev) {\n                                valid = false;\n                            }\n                        });\n                        if (valid) {\n                            v[0] = x;\n                            v[1] = y;\n                        }\n                    });\n                    let cont;\n                    do {\n                        cont = false;\n                        for (let j = 0; j < verts.length; ++j) {\n                            let neighborhood = verts.filter(v => Math.sqrt(Math.pow(v[0] - verts[j][0], 2) + Math.pow(v[1] - verts[j][1], 2)) < spacing - spacingDev);\n                            if (neighborhood.length > 1) {\n                                let x = 0;\n                                let y = 0;\n                                neighborhood.forEach(v => {\n                                    x += v[0];\n                                    y += v[1];\n                                });\n                                x /= neighborhood.length;\n                                y /= neighborhood.length;\n                                const v1 = neighborhood[0];\n                                neighborhood.splice(0, 1);\n                                v1[0] = x;\n                                v1[1] = y;\n                                neighborhood.forEach(v2 => {\n                                    v2[2].forEach(v3 => {\n                                        if (v1[2].indexOf(v3) < 0) {\n                                            v1[2].push(v3);\n                                            v3[2][v3[2].indexOf(v2)] = v1;\n                                            edges.push([ v1, v3 ]);\n                                        }\n                                    });\n                                    let deadEdges = [];\n                                    edges.forEach(e => {\n                                        if (e[0] === v2 || e[1] === v2) {\n                                            deadEdges.push(e);\n                                        }\n                                    });\n                                    deadEdges.forEach(e => {\n                                        edges.splice(edges.indexOf(e), 1);\n                                    });\n                                    verts.splice(verts.indexOf(v2), 1);\n                                    middles.splice(middles.indexOf(v2), 1);\n                                });\n                            }\n                        }\n                    } while (cont);\n                }\n                deadEdges = [];\n                edges.forEach(e => {\n                    if (verts.indexOf(e[0]) < 0 || verts.indexOf(e[1]) < 0) {\n                        deadEdges.push(e);\n                    }\n                });\n                deadEdges.forEach(e => {\n                    edges.splice(edges.indexOf(e), 1);\n                });\n            } catch (ex) {\n                console.error(ex);\n            }\n            edges.forEach((edge, i) => {\n                gfx.push(<line x1={edge[0][0]} y1={edge[0][1]} x2={edge[1][0]} y2={edge[1][1]} strokeWidth={edgeSize} stroke={color} key={`edge-${i}`} />);\n            });\n            verts.forEach((vert, i) => {\n                gfx.push(<circle cx={vert[0]} cy={vert[1]} r={vertexSize} fill={color} key={`vert-${i}`} />);\n            });\n        }\n        return (\n            <svg viewBox={`0 0 ${w} ${h}`}>\n                <rect x=\"0\" y=\"0\" width={w} height={h} fill={this.props.background.current.state.value} />\n                {gfx}\n            </svg>\n        );\n    }\n}\n\n(() => {\n    const widthRef = React.createRef();\n    const heightRef = React.createRef();\n    const spacingRef = React.createRef();\n    const spacingDeviationRef = React.createRef();\n    const vertexSizeRef = React.createRef();\n    const edgeSizeRef = React.createRef();\n    const stepsRef = React.createRef();\n    const backgroundRef = React.createRef();\n    const foregroundRef = React.createRef();\n    const width = <NumericParameter label=\"Width\" defaultValue={8.5} key=\"width\" ref={widthRef} />;\n    const height = <NumericParameter label=\"Height\" defaultValue={11} key=\"height\" ref={heightRef} />;\n    const spacing = <NumericParameter label=\"Average Spacing\" defaultValue={1} key=\"spacing\" ref={spacingRef} />;\n    const spacingDeviation = <NumericParameter label=\"Spacing Deviation\" defaultValue={0.5} key=\"spacing-dev\" ref={spacingDeviationRef} />;\n    const vertexSize = <NumericParameter label=\"Vertex Size\" defaultValue={0.125} key=\"vertex\" ref={vertexSizeRef} />;\n    const edgeSize = <NumericParameter label=\"Edge Size\" defaultValue={0.02} key=\"edge\" ref={edgeSizeRef} />;\n    const steps = <NumericParameter label=\"Steps\" defaultValue={10} key=\"steps\" ref={stepsRef} />;\n    const background = <ColorParameter label=\"Background Color\" defaultValue=\"#FFFFFF\" key=\"background\" ref={backgroundRef} />;\n    const foreground = <ColorParameter label=\"Foreground Color\" defaultValue=\"#3F3FFF\" key=\"foreground\" ref={foregroundRef} />;\n    PatternDatabase.register(\"Triangle Mesh\", [\n        width,\n        height,\n        spacing,\n        spacingDeviation,\n        vertexSize,\n        edgeSize,\n        steps,\n        background,\n        foreground\n    ], <TriangleMesh width={widthRef} height={heightRef} spacing={spacingRef} spacingDeviation={spacingDeviationRef} vertexSize={vertexSizeRef} edgeSize={edgeSizeRef} steps={stepsRef} background={backgroundRef} foreground={foregroundRef} />);\n})();\n","import React from \"react\";\n\nexport default class NumericParameter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"value\": localStorage[`NumericParameter-${this.props.label}`] || this.props.defaultValue || 0,\n            \"textValue\": localStorage[`NumericParameter-${this.props.label}`] || this.props.defaultValue || \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleStateChanged = this.handleStateChanged.bind(this);\n    }\n\n    handleStateChanged() {\n        this.pattern.forceUpdate();\n        localStorage[`NumericParameter-${this.props.label}`] = this.state.value;\n    }\n\n    handleChange(ev) {\n        if (ev.target.value === \"\") {\n            this.setState({\n                \"value\": 0,\n                \"textValue\": \"\"\n            }, this.handleStateChanged);\n        } else {\n            const value = parseFloat(ev.target.value);\n            if (!isNaN(value)) {\n                if (ev.target.value.endsWith(\".\")) {\n                    this.setState({\n                        \"value\": value,\n                        \"textValue\": `${value}.`\n                    }, this.handleStateChanged);\n                } else {\n                    this.setState({\n                        \"value\": value,\n                        \"textValue\": value\n                    }, this.handleStateChanged);\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"input-field\">\n                <label>{this.props.label}</label>\n                <input type=\"text\" value={this.state.textValue} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nexport default class ColorParameter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"value\": localStorage[`ColorParameter-${this.props.label}`] || this.props.defaultValue || \"#000000\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(ev) {\n        if (ev.target.value.match(/^#[0-9a-fA-F]{6}$/)) {\n            this.setState({\n                \"value\": ev.target.value\n            }, () => {\n                this.pattern.forceUpdate();\n                localStorage[`ColorParameter-${this.props.label}`] = this.state.value;\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"input-field\">\n                <label>{this.props.label}</label>\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport NumericParameter from \"../parameters/NumericParameter\";\nimport ColorParameter from \"../parameters/ColorParameter\";\nimport PatternDatabase from \"../PatternDatabase\";\n\nconst dpi = 300;\nconst tan30 = Math.tan(Math.PI / 6);\n\nclass Isometric extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.width.current.pattern = this;\n        this.props.height.current.pattern = this;\n        this.props.size.current.pattern = this;\n        this.props.foreground.current.pattern = this;\n        this.props.background.current.pattern = this;\n    }\n\n    render() {\n        const w = this.props.width.current.state.value * dpi;\n        const h = this.props.height.current.state.value * dpi;\n        const s = this.props.size.current.state.value * dpi;\n        const c = this.props.foreground.current.state.value;\n        const dy = s / tan30 / 2;\n        let lines = [];\n        let i = 0;\n        if (s > 0) {\n            for (let y = dy; y < h; y += dy) {\n                lines.push(<line x1={0} x2={w} y1={y} y2={y} stroke={c} key={`line-${i++}`} />);\n            }\n            let maxY = dy;\n            for (let y = dy; y < h + w / tan30; y += 2 * dy) {\n                let x1 = 0;\n                let y1 = y;\n                if (y1 > h) {\n                    x1 = (y1 - h) * tan30;\n                    y1 = h;\n                } else {\n                    maxY = y1;\n                }\n                let x2 = w;\n                let y2 = y - w / tan30;\n                if (y2 < 0) {\n                    x2 -= -y2 * tan30;\n                    y2 = 0;\n                }\n                lines.push(<line x1={x1} y1={y1} x2={x2} y2={y2} stroke={c} key={`line-${i++}`} />);\n            }\n            for (let y = maxY; y > -w / tan30; y -= 2 * dy) {\n                let x1 = 0;\n                let y1 = y;\n                if (y1 < 0) {\n                    x1 += -y1 * tan30;\n                    y1 = 0;\n                }\n                let x2 = w;\n                let y2 = y + w / tan30;\n                if (y2 > h) {\n                    x2 -= (y2 - h) * tan30;\n                    y2 = h;\n                }\n                lines.push(<line x1={x1} y1={y1} x2={x2} y2={y2} stroke={c} key={`line-${i++}`} />);\n            }\n        } else {\n            lines.push(<rect x=\"0\" y=\"0\" width={w} height={h} fill={c} key={`line-${i++}`} />);\n        }\n        return (\n            <svg viewBox={`0 0 ${w} ${h}`}>\n                <rect x=\"0\" y=\"0\" width={w} height={h} fill={this.props.background.current.state.value} />\n                {lines}\n            </svg>\n        );\n    }\n}\n\n(() => {\n    const widthRef = React.createRef();\n    const heightRef = React.createRef();\n    const sizeRef = React.createRef();\n    const backgroundRef = React.createRef();\n    const foregroundRef = React.createRef();\n    const width = <NumericParameter label=\"Width\" defaultValue={8.5} key=\"width\" ref={widthRef} />;\n    const height = <NumericParameter label=\"Height\" defaultValue={11} key=\"height\" ref={heightRef} />;\n    const size = <NumericParameter label=\"Size\" defaultValue={0.25} key=\"size\" ref={sizeRef} />;\n    const background = <ColorParameter label=\"Background Color\" defaultValue=\"#FFFFFF\" key=\"background\" ref={backgroundRef} />;\n    const foreground = <ColorParameter label=\"Foreground Color\" defaultValue=\"#3F3FFF\" key=\"foreground\" ref={foregroundRef} />;\n    PatternDatabase.register(\"Isometric Paper\", [\n        width,\n        height,\n        size,\n        background,\n        foreground\n    ], <Isometric width={widthRef} height={heightRef} size={sizeRef} background={backgroundRef} foreground={foregroundRef} />);\n})();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { register } from \"./serviceWorker\";\nimport \"./Patterns\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregister();\n"],"sourceRoot":""}